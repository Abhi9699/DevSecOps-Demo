import argparse
import json
import os
import sys
import google.generativeai as genai

def load_json(path):
    """Load a JSON or JSONL file."""
    if not os.path.isfile(path):
        print(f"[WARN] File not found: {path}")
        return None
    try:
        if path.endswith(".jsonl"):
            with open(path, "r", encoding="utf-8") as f:
                return [json.loads(line.strip()) for line in f if line.strip()]
        else:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        print(f"[ERROR] Failed to parse {path}: {e}")
        return None

def summarize_findings(findings, max_items=10):
    """Generate Markdown bullet points for vulnerabilities."""
    if not findings:
        return "‚úÖ No issues detected."

    items = []
    if isinstance(findings, dict):
        for key in ("results", "matches", "vulnerabilities", "violations", "scan_results"):
            if key in findings:
                items = findings[key]
                break
        if not items:
            items = list(findings.values())
    elif isinstance(findings, list):
        items = findings
    else:
        return "_No actionable findings._"

    out = []
    count = 0
    for item in items:
        if count >= max_items:
            out.append(f"...({len(items) - max_items} more not shown)")
            break

        if isinstance(item, dict):
            parts = []
            label = item.get("severity", "Medium")
            issue = item.get("issue") or item.get("message") or item.get("type") or "Unclassified issue"
            location = item.get("filepath") or item.get("file") or item.get("url") or "Unknown location"
            line = item.get("line")
            
            parts.append(f"**{label}** - {issue}")
            if line:
                parts.append(f"üìç `{location}:{line}`")
            else:
                parts.append(f"üìÅ `{location}`")

            if "fix" in item:
                parts.append(f"üí° **Fix**: {item['fix']}")

            out.append("- " + "  ".join(parts))
        else:
            out.append(f"- {str(item)}")

        count += 1

    return "\n".join(out) if out else "‚úÖ No issues detected."

def build_prompt(trivy, semgrep, trufflehog, zap, garak):
    """Construct the AI prompt for Gemini."""
    sections = {
        "Trivy (SCA/IaC)": trivy,
        "Semgrep (SAST)": semgrep,
        "TruffleHog (Secrets Detection)": trufflehog,
        "ZAP (DAST)": zap,
        "Garak (LLM Security Testing)": garak
    }

    prompt = (
        "# ü§ñ AI-Powered CI/CD Security Report\n"
        "**Generated by Gemini AI ‚Äî Secure by Design, Automated by Intelligence**\n\n"
        "This report summarizes vulnerabilities and security risks discovered during the CI/CD pipeline scan.\n"
        "Tools: Trivy, Semgrep, TruffleHog, ZAP, Garak.\n\n"
        "---\n\n"
        "## üìä Summary Table\n"
        "(Populate this table after generating the summary if you want metrics.)\n\n"
    )

    for title, data in sections.items():
        prompt += f"## üîç {title}\n{summarize_findings(data)}\n\n"

    prompt += (
        "---\n"
        "## ‚úÖ Recommended Next Steps\n"
        "Please address high and critical issues first. Rotate exposed secrets, patch outdated containers, and fix insecure code paths.\n\n"
        "---\n"
        "_This report was auto-generated using Google Gemini AI from raw scan artifacts. For full findings, see respective tool outputs._"
    )

    return prompt

def summarize_with_gemini(prompt, api_key, model_name="gemini-2.0-flash"):
    genai.configure(api_key=api_key)
    try:
        model = genai.GenerativeModel(model_name)
        response = model.generate_content(prompt)
        print("[INFO] Gemini AI responded successfully.")
        return response.text
    except Exception as e:
        print(f"[ERROR] Gemini API call failed: {e}")
        return "‚ö†Ô∏è Failed to generate AI summary."

def main():
    parser = argparse.ArgumentParser(description="Generate a professional AI security summary report from scan results.")
    parser.add_argument("--trivy", required=True)
    parser.add_argument("--semgrep", required=True)
    parser.add_argument("--trufflehog", required=True)
    parser.add_argument("--zap", required=True)
    parser.add_argument("--garak", required=True)
    parser.add_argument("--output", required=True)
    args = parser.parse_args()

    # Load scan artifacts
    print("[INFO] Loading scan artifacts...")
    trivy = load_json(args.trivy)
    semgrep = load_json(args.semgrep)
    trufflehog = load_json(args.trufflehog)
    zap = load_json(args.zap)
    garak = load_json(args.garak)

    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        print("[ERROR] GEMINI_API_KEY environment variable not set.")
        sys.exit(1)

    prompt = build_prompt(trivy, semgrep, trufflehog, zap, garak)
    print("[INFO] Sending prompt to Gemini...")
    summary = summarize_with_gemini(prompt, api_key)

    try:
        with open(args.output, "w", encoding="utf-8") as f:
            f.write(summary.strip() + "\n")
        print(f"[SUCCESS] Report saved to {args.output}")
    except Exception as e:
        print(f"[ERROR] Failed to write report: {e}")
        sys.exit(1)

    print("\n--- Report Preview ---\n")
    print(summary.strip()[:2000])
    print("\n--- End of Preview ---")

if __name__ == "__main__":
    main()
